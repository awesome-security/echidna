#!/usr/bin/perl
#
# This file is part of the NSM framework
#
# Copyright (C) 2010-2011, Edward Fjellsk√•l <edwardfjellskaal@gmail.com>
#                          Eduardo Urias    <windkaiser@gmail.com>
#                          Ian Firns        <firnsy@securixlive.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License Version 2 as
# published by the Free Software Foundation.  You may not use, modify or
# distribute this program under any other version of the GNU General
# Public License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#

use lib '../lib';

use warnings;
use strict;
use v5.10;

#
# PERL INCLUDES
#
use Carp;
use Data::Dumper;
use POE;
use POE::Component::Client::TCP;
use POE::Filter::Line;
use POE::Wheel::ReadWrite;

#
# NSMF INCLUDES
#
use NSMF::Common::Logger;
use NSMF::Common::Util;
use NSMF::Client;

#
# GLOBALS
#
our $VERSION = '0.1';

my $nsmf    = NSMF::Client->new();
my $config  = $nsmf->config();
my $proto   = $nsmf->proto();
my $logger  = NSMF::Common::Logger->new();

my ($self) = @_;

my $host = $config->host();
my $port = $config->port();

my $module_active = 'core';
my $modules = [];
my $commands = {};


if ( ! defined_args($host, $port) ) {
    die('Either host or port have NOT been defined.');
}

POE::Component::Client::TCP->new(
    Alias         => 'client',
    RemoteAddress => $host,
    RemotePort    => $port,
    Filter        => "POE::Filter::Line",
    Connected => sub {
        my ($kernel, $heap) = @_[KERNEL, HEAP];
        $logger->info("[+] Connected to server ($host:$port) ...");

        $heap->{name}   = undef; #$config->name();
        $heap->{secret} = undef; #$config->secret();

        $kernel->yield('login');
    },
    ConnectError => sub {
        $logger->warn("Could not connect to server ($host:$port) ...");
    },
    ServerInput => sub {
        my ($kernel, $response) = @_[KERNEL, ARG0];

        $kernel->yield(dispatcher => $response);
    },
    ServerError => sub {
        my ($kernel, $heap) = @_[KERNEL, HEAP];
        $logger->warn("Lost connection to server...");
        $logger->info("Going Down.");
        exit;
    },
    ObjectStates => [
        $proto => $proto->states(),
    ],
    InlineStates => {
        'login' => \&login,
        'prompt' => \&prompt,
        'load_session' => \&load_session,
    }
);

$logger->info('Client Initialized ...');

sub init
{
#    $commands
#        "modules_available" => {
#          "help" => "Returns the available modules.",
#          "exec" => \&get_modules_available,
#        },

}


sub login
{
    my ($kernel, $heap) = @_[KERNEL, HEAP];

    if( ! defined($heap->{name}) ) {
        $heap->{name} = input_get('Username: ');
    }

    if( ! defined($heap->{secret}) ) {
        $heap->{secret} = input_get('Password: ');
    }

    $kernel->yield('authenticate');
}

sub load_session
{
    my ($kernel, $heap) = @_[KERNEL, HEAP];

    # clear existing known commands
    $modules = [];
    $commands = {};

    # start the query process
    $kernel->yield('get', {
        type => 'core',
        data => [ 'modules_available' ]
    }, sub {
        my ($s, $k, $h, $json) = @_;

        $modules = $json->{result} // [];

        foreach my $m ( @{ $modules } ) {
            $commands->{$m} = [];

            $kernel->yield('get', {
                type => $m,
                data => [ 'commands_available' ]
            }, sub {
                my ($s, $k, $h, $json) = @_;

                $commands->{$m} = $json->{result} // [];
            });
        }
    });

    # build up
    $heap->{console} = POE::Wheel::ReadWrite->new(
        InputHandle => \*STDIN,
        OutputHandle => \*STDOUT,
        InputEvent => "prompt"
    );

    # show we are ready to recieve user prompt
    prompt_print();
}




sub prompt
{
    my ($kernel, $heap, $data) = @_[KERNEL, HEAP, ARG0];

    my @action = split(/ /, $data);

    if( @action ) {
        given( $action[0] )
        {
            when(/^(h|help|\?)$/) {
                # check if we want help of a specific command
                if ( ( @action == 2 ) &&
                     ( $action[1] ~~ @{ $commands->{$module_active} } ) ) {
                    $kernel->yield('get', {
                        type => $module_active,
                        data => [ 'help_' . $action[1] ]
                    }, sub {
                        my ($s, $k, $h, $json) = @_;

                        my $result = $json->{result} // '';

                        say( $result );
                    });
                }
                else {
                    say('Commands available:');

                    # list all commands for the current level
                    foreach my $c ( @{ $commands->{$module_active} } ) {
                        say( '  ' . $c );
                    }

                    # list available modules if at root level
                    if ( $module_active eq 'core' ) {
                        foreach my $m ( @{ $modules } ) {
                            next if ( $m eq 'core' );

                            say( '  [' . $m . ']' );
                        }
                    }
                }
            }
            when( @{ $commands->{$module_active} } ) {
                $kernel->yield('get', {
                    type => $module_active,
                    data => @action
                }, sub {
                    my ($s, $k, $h, $json) = @_;

                    my $result = $json->{result} // '';

                    # TODO post process result with client aware components
                    say( $result );
                });
            }
            when ( @{ $modules } ) {
                $module_active = $action[0];

            }
            default {
              say('ERROR: Unknown action: ' . $action[0]);
            }
        }
    }

    prompt_print();
}

sub prompt_print
{
    if ( $module_active eq 'core' ) {
        print('nsmf> ');
    }
    else {
        print($module_active . '> ');
    }
}


sub input_get {
    my ( $message ) = @_;

    $message //= '';

    print( 'nsmf> ' . $message );

    my $input = <STDIN>;
    chomp($input);

    return $input;
}

POE::Kernel->run();

exit(0);
