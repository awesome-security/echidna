#!/usr/bin/perl
#
# This file is part of the NSM framework
#
# Copyright (C) 2010-2011, Edward Fjellsk√•l <edwardfjellskaal@gmail.com>
#                          Eduardo Urias    <windkaiser@gmail.com>
#                          Ian Firns        <firnsy@securixlive.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License Version 2 as
# published by the Free Software Foundation.  You may not use, modify or
# distribute this program under any other version of the GNU General
# Public License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#

use lib '../lib';

use warnings;
use strict;
use v5.10;

#
# PERL INCLUDES
#
use Carp;
use Data::Dumper;
use Digest::SHA qw(sha256_hex);
use POE;
use POE::Component::Client::TCP;
use POE::Filter::Line;
use POE::Wheel::ReadWrite;
use POSIX;

#
# NSMF INCLUDES
#
use NSMF::Common::JSON;
use NSMF::Common::Logger;
use NSMF::Common::Util;
use NSMF::Client;

#
# GLOBALS
#
our $VERSION = '0.1';

my $nsmf    = NSMF::Client->new();
my $config  = $nsmf->config();
my $proto   = $nsmf->proto();
my $logger  = NSMF::Common::Logger->new();

my ($self) = @_;

my $host = $config->host();
my $port = $config->port();

my $module_active = 'core';
my $modules = [];
my $api_commands = {};
my $ncommands = {};
my $acommands = [];


if ( ! defined_args($host, $port) ) {
    die('Either host or port have NOT been defined.');
}

POE::Component::Client::TCP->new(
    Alias         => 'client',
    RemoteAddress => $host,
    RemotePort    => $port,
    Filter        => "POE::Filter::Line",
    Connected => sub {
        my ($kernel, $heap) = @_[KERNEL, HEAP];
        $logger->info("[+] Connected to server ($host:$port) ...");

        $heap->{name}   = undef; #$config->name();
        $heap->{secret} = undef; #$config->secret();

        $kernel->yield('init');
        $kernel->yield('login');
    },
    ConnectError => sub {
        $logger->warn("Could not connect to server ($host:$port) ...");
    },
    ServerInput => sub {
        my ($kernel, $response) = @_[KERNEL, ARG0];

        $kernel->yield(dispatcher => $response);
    },
    ServerError => sub {
        my ($kernel, $heap) = @_[KERNEL, HEAP];
        $logger->warn("Lost connection to server...");
        $logger->info("Going Down.");
        exit;
    },
    ObjectStates => [
        $proto => $proto->states(),
    ],
    InlineStates => {
        'init' => \&init,
        'login' => \&login,
        'prompt' => \&prompt,
        'load_session' => \&load_session,
    }
);

$logger->info('Client Initialized ...');

sub init
{
#    $commands
#        "modules_available" => {
#          "help" => "Returns the available modules.",
#          "exec" => \&get_modules_available,
#        },

    $ncommands = {
        core => {
            register_client => [
                {
                    command => "register client",
                    help => "--name, --password",
                    function => \&register_client,
                }
            ],
            unregister_client => [
                {
                    command => "unregister client",
                    help => "--id",
                    function => \&unregister_client,
                }
            ],
            update_client => [
                {
                    command => "update client",
                    help => "--id",
                    function => \&update_client,
                }
            ],
            search_event => [
                {
                    command => "search event",
                    help => "Usage: search event [options]\n" .
                            "Options:\n" .
                            "  --timestamp=timestamp    Filter on timestamp recorded.\n\n" .
#                           "  --agent-id=id            Filter on events specific to the agent's id\n" .
                            "  --node-id=id             Filter on events specific to the node's id\n\n" .
                            "  --src-ip=ip              Filter on source ip.\n" .
                            "  --src-port=port          Filter on source port.\n\n" .
                            "  --dst-ip=ip              Filter on destination ip.\n" .
                            "  --dst-port=port          Filter on destination port.\n" .
                            "  --ip=ip                  Filter on either source or destination ip.\n" .
                            "  --port=port              Filter on either source or destination port.\n\n" .
                            "  --protocol=protocol      Filter on TCP/IP protocol.\n" .
                            "  --version=version        Filter on IP version. (eg. 4 or 6).\n\n" .
                            "  --sig-id=id              Filter on signature id).\n" .
                            "  --sig-revision=revision  Filter on signature revision.\n" .
                            "  --sig-priority=priority  Filter on signature priority.\n" .
                            "  --sig-message=message    Filter on signature message.\n" .
                            "  --sig-category=category  Filter on signature category.\n" ,
                    function => \&search_event,
                }
            ],
            search_session => [
                {
                    command => "search session",
                    help => "Usage: search session [options]\n" .
                            "Options:\n" .
                            "  --time-start=timestamp  Filter on timestamp of first packet.\n" .
                            "  --time-end=timestamp    Filter on timestamp of last packet.\n" .
                            "  --time-duration=n       Filter on n seconds of duration.\n\n" .
#                            "  --agent-id=id           Filter on sessions specific to the agent's id\n" .
                            "  --node-id=id            Filter on sessions specific to the node's id\n\n" .
                            "  --src-ip=ip             Filter on source ip.\n" .
                            "  --src-port=port         Filter on source port.\n" .
                            "  --src-total-bytes=n     Filter on total n bytes sent from source.\n" .
                            "  --src-total-packets=n   Filter on total n packets sent from source.\n" .
                            "  --src-flags             Filter on total flags (bitwise-or'd) of packets sent from source.\n\n" .

                            "  --dst-ip=ip             Filter on destination ip.\n" .
                            "  --dst-port=port         Filter on destination port.\n" .
                            "  --dst-total-bytes=n     Filter on total n bytes sent from destination.\n" .
                            "  --dst-total-packets=n   Filter on total n packets sent from destination.\n" .
                            "  --dst-flags             Filter on total flags (bitwise-or'd) of packets sent from destination.\n\n" .
                            "  --ip=ip                 Filter on either source or destination ip.\n" .
                            "  --port=port             Filter on either source or destination port.\n\n" .
                            "  --protocol=protocol     Filter on TCP/IP protocol.\n" .
                            "  --version=version       Filter on IP version. (eg. 4 or 6).\n",
                    function => \&search_session,
                }
            ],
            clients_connected => [
                {
                    command => "show clients",
                    help => "None.",
                    function => \&show_clients
                }
            ],
            server_uptime => [
                {
                    command => "server uptime",
                    help => "",
                    function => \&show_server_uptime
                }
            ],
            server_version => [
                {
                    command => "server version",
                    help => "",
                    function => \&show_server_version
                }
            ],
        }
    }
}


sub login
{
    my ($kernel, $heap) = @_[KERNEL, HEAP];

    if( ! defined($heap->{name}) ) {
        $heap->{name} = input_get('Username: ');
    }

    if( ! defined($heap->{secret}) ) {
        $heap->{secret} = sha256_hex(input_get('Password: '));
    }

    $kernel->yield('authenticate');
}

sub load_session
{
    my ($kernel, $heap) = @_[KERNEL, HEAP];

    # clear existing known commands
    $acommands = [];

    # start the query process
    $kernel->yield('get', {
        type => 'core',
        data => 'modules_available'
    }, sub {
        my ($s, $k, $h, $json) = @_;

        my $modules = $json->{result} // [];

        foreach my $m ( @{ $modules } ) {
            $kernel->yield('get', {
                type => $m,
                data => 'commands_available'
            }, sub {
                my ($s, $k, $h, $json) = @_;

                check_available_commands($m, $json->{result} // []);
            });
        }
    });

    # build up
    $heap->{console} = POE::Wheel::ReadWrite->new(
        InputHandle => \*STDIN,
        OutputHandle => \*STDOUT,
        InputEvent => "prompt"
    );

    # show we are ready to recieve user prompt
    prompt_print();
}

sub check_available_commands {
    my ($m, $r) = @_;

    if( defined( $ncommands->{$m} ) ) {
        foreach my $c ( @{ $r } ) {
            if( defined( $ncommands->{$m}{$c} ) ) {
                foreach my $n ( @{ $ncommands->{$m}{$c} } ) {
                    push( @{ $acommands }, $n );
                }
            }
        }
    }
}


sub prompt
{
    my ($kernel, $heap, $data) = @_[KERNEL, HEAP, ARG0];

    # loop through all available commands
    foreach my $c ( @{ $acommands } ) {
        return if( ! $c->{function}($kernel, $data) );
    }

    # no commands seen
    if( $data =~ /^(h|help|\?)(.*)$/ ) {
        my $extra = $2;

        say Dumper($acommands);
    }
    elsif( $data =~ /^[^\s]+/ ) {
        say('Sorry DAVE, I don\'t understand that: ' . $data);
    }

    prompt_print();
}

sub prompt_print
{
    if ( $module_active eq 'core' ) {
        print('echidna> ');
    }
    else {
        print($module_active . '> ');
    }
}


sub input_get {
    my ( $message ) = @_;

    $message //= '';

    print( 'echidna> ' . $message );

    my $input = <STDIN>;
    chomp($input);

    return $input;
}

#
# COMMAND TESTING AND PROCESSING
#

sub register_client {
    my ($kernel, $data) = @_;

    if( $data =~ /^register\sclient\s(.*)/) {
        my $sql = {};

        my @search_args = split(/[ ]/, $1);

        foreach my $k ( @search_args ) {
            given( $k ) {
                when(/^--name=([^ ]*)/) {
                    $sql->{name} = $1;
                }
                when(/^--acl=([^ ]*)/) {
                    $sql->{level} = $1;
                }
                when(/^--password=([^ ]*)/) {
                    $sql->{password} = sha256_hex($1);
                }
                when(/^--description=([^ ]*)/) {
                    $sql->{description} = $1;
                }
                default {
                    $logger->debug('Unsupported parameter: ' . $k);
                    return 0;
                }
            }
        }

        if( ! defined_args( $sql->{name},
                            $sql->{level},
                            $sql->{password} ) ) {
            say("Mandatory arguments are missing.");
            prompt_print();
            return 0;
        }

        $kernel->yield('get', {
            type => "core",
            data => {
              "register_client" => $sql
            },
        }, sub {
            my ($s, $k, $h, $json) = @_;

            my $result = $json->{result} // [];

            # TODO post process result with client aware components

            say(Dumper($result));
            prompt_print();
        });

        return 0;
    }

    return 1;
}

sub update_client {
    my ($kernel, $data) = @_;

    if( $data =~ /^update\sclient\s(.*)/) {
        my $sql = {};

        my @search_args = split(/[ ]/, $1);

        foreach my $k ( @search_args ) {
            given( $k ) {
                when(/^--id=([^ ]*)/) {
                    $sql->{id} = $1;
                }
                when(/^--name=([^ ]*)/) {
                    $sql->{name} = $1;
                }
                when(/^--acl=([^ ]*)/) {
                    $sql->{level} = $1;
                }
                when(/^--password=([^ ]*)/) {
                    $sql->{password} = sha256_hex($1);
                }
                when(/^--description=([^ ]*)/) {
                    $sql->{description} = $1;
                }
                default {
                    $logger->debug('Unsupported parameter: ' . $k);
                    return 0;
                }
            }
        }

        if( ! defined_args( $sql->{id} )  ){
            say("Mandatory arguments are missing.");
            prompt_print();
            return 0;
        }

        $kernel->yield('get', {
            type => "core",
            data => {
              "update_client" => $sql
            },
        }, sub {
            my ($s, $k, $h, $json) = @_;

            my $result = $json->{result} // [];

            # TODO post process result with client aware components

            say(Dumper($result));
            prompt_print();
        });

        return 0;
    }

    return 1;
}

sub unregister_client {
    my ($kernel, $data) = @_;

    if( $data =~ /^unregister\sclient\s(.*)/) {
        my $sql = {};

        my @search_args = split(/[ ]/, $1);

        foreach my $k ( @search_args ) {
            given( $k ) {
                when(/^--id=([^ ]*)/) {
                    $sql->{id} = $1;
                }
                default {
                    $logger->debug('Unsupported parameter: ' . $k);
                    return 0;
                }
            }
        }

        $kernel->yield('get', {
            type => "core",
            data => {
              "unregister_client" => $sql
            },
        }, sub {
            my ($s, $k, $h, $json) = @_;

            my $result = $json->{result} // [];

            # TODO post process result with client aware components

            say(Dumper($result));
            prompt_print();
        });

        return 0;
    }

    return 1;
}

sub show_clients {
    my ($kernel, $data) = @_;

    if( $data =~ /^show\sclients$/) {
        $kernel->yield('get', {
            type => "core",
            data => "clients_connected",
        }, sub {
            my ($s, $k, $h, $json) = @_;

            my $result = $json->{result};

            if( ref($result) eq 'HASH' ) {
                say Dumper($result);
                prompt_print();
            }
            else {
                # TODO post process result with client aware components
                say( "Unknown!");
                prompt_print();
            }
        });

        return 0;
    }

    return 1;
}

sub show_nodes {
    my ($kernel, $data) = @_;

    if( $data =~ /^show\snodes$/) {
        $kernel->yield('get', {
            type => "core",
            data => "nodes_connected",
        }, sub {
            my ($s, $k, $h, $json) = @_;

            my $result = $json->{result};

            if( ref($result) eq 'HASH' ) {
                say Dumper($result);
                prompt_print();
            }
            else {
                # TODO post process result with client aware components
                say( "Unknown!");
                prompt_print();
            }
        });

        return 0;
    }

    return 1;
}


sub show_server_uptime {
    my ($kernel, $data) = @_;

    if( $data =~ /^server\suptime$/) {
        $kernel->yield('get', {
            type => "core",
            data => "server_uptime",
        }, sub {
            my ($s, $k, $h, $json) = @_;

            my $result = $json->{result};

            say('Echidna Server has been up for ' . $result . ' seconds');
            prompt_print();
        });

        return 0;
    }

    return 1;
}

sub show_server_version {
    my ($kernel, $data) = @_;

    if( $data =~ /^server\sversion$/) {
        $kernel->yield('get', {
            type => "core",
            data => "server_version",
        }, sub {
            my ($s, $k, $h, $json) = @_;

            my $result = $json->{result};

            if( ref($result) eq 'HASH' ) {
                my $literal = 'Echidna Server Version: v' . join('.', $result->{major}, $result->{minor}, $result->{revision}) . ' (b' . $result->{build} . ')';
                say($literal);
                prompt_print();
            }
            else {
                # TODO post process result with client aware components
                say( "Unknown");
                prompt_print();
            }
        });

        return 0;
    }

    return 1;
}


sub search_session {
    my ($kernel, $data) = @_;

    if( $data =~ /^search\ssession\s(.*)/) {
        my $sql = {};

        my @search_args = split(/[ ]/, $1);

        foreach my $k ( @search_args ) {
            given( $k ) {
                when(/^--timestamp=([^ ]*)/) {
                    $sql->{timestamp} = $1;
                }
                when(/^--time-start=([^ ]*)/) {
                    $sql->{time_start} = $1;
                }
                when(/^--time-end=([^ ]*)/) {
                    $sql->{time_end} = $1;
                }
                when(/^--time-duration=([^ ]*)/) {
                    $sql->{time_duration} = $1;
                }
                when(/^--agent-id=([^ ]*)/) {
                    $sql->{agent_id} = $1;
                }
                when(/^--node-id=([^ ]*)/) {
                    $sql->{id} = $1;
                }
                when(/^--src-ip=([^ ]*)/) {
                    $sql->{net_src_ip} = $1;
                }
                when(/^--src-port=([^ ]*)/) {
                    $sql->{net_src_port} = $1;
                }
                when(/^--src-total-bytes=([^ ]*)/) {
                    $sql->{net_src_total_bytes} = $1;
                }
                when(/^--src-total-packets=([^ ]*)/) {
                    $sql->{net_src_total_packets} = $1;
                }
                when(/^--src-flagss=([^ ]*)/) {
                    $sql->{net_src_flags} = $1;
                }
                when(/^--dst-ip=([^ ]*)/) {
                    $sql->{net_dst_ip} = $1;
                }
                when(/^--dst-port=([^ ]* )/) {
                    $sql->{net_dst_port} = $1;
                }
                when(/^--dst-total-bytes=([^ ]*)/) {
                    $sql->{net_dst_total_bytes} = $1;
                }
                when(/^--dst-total-packets=([^ ]*)/) {
                    $sql->{net_dst_total_packets} = $1;
                }
                when(/^--dst-flagss=([^ ]*)/) {
                    $sql->{net_dst_flags} = $1;
                }
                when(/^--ip=([^ ]*)/) {
                    $sql->{"\$or"} = [
                      { net_src_ip => $1 },
                      { net_dst_ip => $1 }
                    ];
                }
                when(/^--port=([^ ]*)/) {
                    $sql->{"\$or"} = [
                      { net_src_port => $1 },
                      { net_dst_port => $1 }
                    ];
                }
                when(/^--protocol=([^ ]*)/) {
                    $sql->{net_protocol} = $1;
                }
                when(/^--version=([^ ]*)/) {
                    $sql->{net_version} = $1;
                }
                default {
                    $logger->debug('Unsupported parameter: ' . $k);
                    return 0;
                }
            }
        }

        $kernel->yield('get', {
            type => "core",
            data => {
              "search_session" => $sql
            },
        }, sub {
            my ($s, $k, $h, $json) = @_;

            my $result = $json->{result} // [];

            # TODO post process result with client aware components

            say( "Total records: " . @{ $result });
            prompt_print();
        });

        return 0;
    }

    return 1;
}



sub search_event {
    my ($kernel, $data) = @_;

    if( $data =~ /^search\sevent\s(.*)/) {
        my $sql = {};

        my @search_args = split(/[ ]/, $1);

        foreach my $k ( @search_args ) {
            given( $k ) {
                when(/^--timestamp=([^ ]*)/) {
                    $sql->{timestamp} = $1;
                }
                when(/^--classification=([^ ]*)/) {
                    $sql->{timestamp} = $1;
                }
                when(/^--node-id=([^ ]*)/) {
                    $sql->{node_id} = $1;
                }
                when(/^--src-ip=([^ ]*)/) {
                    $sql->{net_src_ip} = $1;
                }
                when(/^--src-port=([^ ]*)/) {
                    $sql->{net_src_port} = $1;
                }
                when(/^--dst-ip=([^ ]*)/) {
                    $sql->{net_dst_ip} = $1;
                }
                when(/^--dst-port=([^ ]* )/) {
                    $sql->{net_dst_port} = $1;
                }
                when(/^--protocol=([^ ]*)/) {
                    $sql->{net_protocol} = $1;
                }
                when(/^--version=([^ ]*)/) {
                    $sql->{net_version} = $1;
                }
                when(/^--sig-id=([^ ]*)/) {
                    $sql->{sig_id} = $1;
                }
                when(/^--sig-revision=([^ ]*)/) {
                    $sql->{sig_revision} = $1;
                }
                when(/^--sig-priority=([^ ]*)/) {
                    $sql->{sig_priority} = $1;
                }
                when(/^--sig-message=([^ ]*)/) {
                    $sql->{sig_message} = $1;
                }
                when(/^--sig-category=([^ ]*)/) {
                    $sql->{sig_category} = $1;
                }
                default {
                    $logger->debug('Unsupported parameter: ' . $k);
                    return 0;
                }
            }
        }

        $kernel->yield('get', {
            type => "core",
            data => {
              "search_event" => $sql
            },
        }, sub {
            my ($s, $k, $h, $json) = @_;

            my $result = $json->{result} // [];

            # TODO post process result with client aware components

            say( "Total records: " . @{ $result });
            prompt_print();
        });

        return 0;
    }

    return 1;
}


POE::Kernel->run();

exit(0);
