#!/usr/bin/perl
#
# This file is part of the NSM framework
#
# Copyright (C) 2010-2011, Edward Fjellsk√•l <edwardfjellskaal@gmail.com>
#                          Eduardo Urias    <windkaiser@gmail.com>
#                          Ian Firns        <firnsy@securixlive.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License Version 2 as
# published by the Free Software Foundation.  You may not use, modify or
# distribute this program under any other version of the GNU General
# Public License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#

use lib '../lib';

use warnings;
use strict;
use v5.10;

#
# PERL INCLUDES
#
use Carp;
use Data::Dumper;
use POE;
use POE::Filter::Line;
use POE::Component::Client::TCP;

#
# NSMF INCLUDES
#
use NSMF::Common::Logger;
use NSMF::Common::Util;
use NSMF::Client;

#
# GLOBALS
#
our $VERSION = '0.1';

my $nsmf    = NSMF::Client->new();
my $config  = $nsmf->config();
my $proto   = $nsmf->proto();
my $logger  = NSMF::Common::Logger->new();

my ($self) = @_;

my $host = $config->host();
my $port = $config->port();
my @commands = ();


if ( ! defined_args($host, $port) ) {
    die('Either host or port have NOT been defined.');
}

POE::Component::Client::TCP->new(
    Alias         => 'client',
    RemoteAddress => $host,
    RemotePort    => $port,
    Filter        => "POE::Filter::Line",
    Connected => sub {
        my ($kernel, $heap) = @_[KERNEL, HEAP];
        $logger->info("[+] Connected to server ($host:$port) ...");

        $heap->{name}   = undef; #$config->name();
        $heap->{secret} = undef; #$config->secret();

        $kernel->yield('login');
    },
    ConnectError => sub {
        $logger->warn("Could not connect to server ($host:$port) ...");
    },
    ServerInput => sub {
        my ($kernel, $response) = @_[KERNEL, ARG0];

        $kernel->yield(dispatcher => $response);
    },
    ServerError => sub {
        my ($kernel, $heap) = @_[KERNEL, HEAP];
        $logger->warn("Lost connection to server...");
        $logger->info("Going Down.");
        exit;
    },
    ObjectStates => [
        $proto => $proto->states(),
    ],
    InlineStates => {
        'login' => \&login,
        'prompt' => \&prompt
    }
);

$logger->info('Client Initialized ...');


sub login
{
    my ($kernel, $heap) = @_[KERNEL, HEAP];

    if( ! defined($heap->{name}) ) {
        $heap->{name} = $logger->prompt('Username: ');
    }

    if( ! defined($heap->{secret}) ) {
        $heap->{secret} = $logger->prompt('Password: ');
    }

    $kernel->yield('authenticate');
}


sub prompt
{
    my ($kernel, $heap) = @_[KERNEL, HEAP];

    my $input = $logger->prompt('');

    my @action = split(/ /, $input);

    if( @action ) {
        given( $action[0] )
        {
            when(/^(h|help|\?)$/) {
              $logger->debug('No help for you!');
            }
            default {
                $logger->error('Unknown action: ' . $action[0]);
            }
        }
    }

    $kernel->yield('prompt');
}


POE::Kernel->run();

exit(0);
