#!/usr/bin/perl
#
# This file is part of the NSM framework
#
# Copyright (C) 2010-2011, Edward Fjellsk√•l <edwardfjellskaal@gmail.com>
#                          Eduardo Urias    <windkaiser@gmail.com>
#                          Ian Firns        <firnsy@securixlive.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License Version 2 as
# published by the Free Software Foundation.  You may not use, modify or
# distribute this program under any other version of the GNU General
# Public License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#

use lib '../lib';

use warnings;
use strict;
use v5.10;

#
# PERL INCLUDES
#
use POE qw(Component::Server::TCP);
use Data::Dumper;

#
# NSMF INCLUDES
#
use NSMF::Common::Logger;
use NSMF::Server;
use NSMF::Server::Action;

#
# GLOBALS
#
our $VERSION = '0.1';

my $nsmf    = NSMF::Server->new();
my $config  = $nsmf->config();
my $proto   = $nsmf->proto();
my $logger  = NSMF::Common::Logger->new();

# service node connections
my $nodes = POE::Component::Server::TCP->new(
    Alias              => "node_listener",
    Address            => $config->node_host(),
    Port               => $config->node_port(),
    ClientConnected    => \&node_connected,
    ClientDisconnected => \&node_disconnected,
    ClientInput => sub {
        my ($kernel, $heap, $input) = @_[KERNEL, HEAP, ARG0];
        $kernel->yield('dispatcher', $input);
    },
    ClientFilter => "POE::Filter::Line",
    ObjectStates => [ $proto => $proto->states ],
    Started => sub {
        $logger->info('Listening for nodes on ' . $config->node_host() . ':' . $config->node_port());
    },
);

my $clients = POE::Component::Server::TCP->new(
    Alias              => "client_listener",
    Address            => $config->client_host(),
    Port               => $config->client_port(),
    ClientConnected    => \&client_connected,
    ClientDisconnected => \&client_disconnected,
    ClientInput => sub {
        my ($kernel, $heap, $input) = @_[KERNEL, HEAP, ARG0];
        $kernel->yield('dispatcher', $input);
    },
    ClientFilter => "POE::Filter::Line",
    ObjectStates => [ $proto => $proto->states ],
    Started => sub {
        $logger->info('Listening for clients on ' . $config->client_host() . ':' . $config->client_port());
    },
);

my $transfer_queue = {};
my $transfer_mngr = POE::Session->create(
    inline_states => {
        _start => sub {
            $_[KERNEL]->alias_set('transfer_mngr');
        },
        catch => sub {
            my ($json) = $_[ARG0];

            $transfer_queue->{$json->{id}} =  NSMF::Server::Action->file_catcher({
                transfer_id => $json->{id},
                checksum    => $json->{result}{checksum},
            });

            if (defined $transfer_queue->{$json->{id}}) {
                $logger->debug("Action file_catcher added to TransferQueue with job id " .$json->{id});
            }
        },
        queue_remove => sub {
            my ($job_id) = $_[ARG0];
            $logger->debug("Removing job id $job_id from TransferQueue");
            delete $transfer_queue->{$job_id};
        },
        queue_status => sub {
            $logger->debug("The Transfer queue has " . scalar(keys %$transfer_queue). " jobs");
            $logger->debug('Job Ids: ('. keys(%$transfer_queue).')');
        }
    },
);
sub node_connected {
    my ($session, $heap) = @_[SESSION, HEAP];

    $logger->debug('Node connected from ' . $heap->{remote_ip} . ':' . $heap->{remote_port});

    # node heap initialization
    $heap->{type}       = 'NODE';
    $heap->{status}     = 'REQ';
    $heap->{nodename}   = undef;
    $heap->{session_id} = undef;
    $heap->{netgroup}   = undef;
}

sub node_disconnected {
    my ($session, $heap) = @_[SESSION, HEAP];
    $logger->debug('Node with ' . $session->ID . ' disconnected');
}

sub client_connected {
    my ($session, $heap) = @_[SESSION, HEAP];

    $logger->debug('Client connected from ' . $heap->{remote_ip} . ':' . $heap->{remote_port});

    # client heap initialization
    $heap->{type}       = 'CLIENT';
    $heap->{status}     = 'REQ';
    $heap->{clientname} = undef;
    $heap->{session_id} = undef;
    $heap->{netgroup}   = undef;
}

sub client_disconnected {
    my ($session, $heap) = @_[SESSION, HEAP];
    $logger->debug('Client with ' . $session->ID . ' disconnected');
}

$logger->info('Server Initialized ...');
POE::Kernel->run();
exit(0);
