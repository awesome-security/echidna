#!/usr/bin/perl
#
# This file is part of the NSM framework
#
# Copyright (C) 2010-2012, Edward Fjellsk√•l <edwardfjellskaal@gmail.com>
#                          Eduardo Urias    <windkaiser@gmail.com>
#                          Ian Firns        <firnsy@securixlive.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License Version 2 as
# published by the Free Software Foundation.  You may not use, modify or
# distribute this program under any other version of the GNU General
# Public License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
use File::Spec;
use FindBin qw($Bin);
use lib File::Spec->catdir($Bin, '..', 'lib');

use warnings;
use strict;
use v5.10;

#
# PERL INCLUDES
#
use AnyEvent;
use AnyEvent::Handle;
use AnyEvent::Socket;
use Carp;
use Data::Dumper;

#
# NSMF INCLUDES
#
use NSMF::Common::Logger;
use NSMF::Common::Registry;

use NSMF::Server;
#use NSMF::Server::Action;
use NSMF::Server::ConfigMngr;
use NSMF::Server::WebSocket qw(websocket_handshake);

#
# GLOBALS
#
our $VERSION = '0.1';

# set base path on server singleton
$NSMF::Server::BASE_PATH = File::Spec->catdir($Bin, '../');

my $config_path = File::Spec->catfile($NSMF::Server::BASE_PATH, 'etc', 'server.yaml');

croak 'Server Configuration File Not Found'
    unless -f -r $config_path;

my $config = NSMF::Server::ConfigMngr->load($config_path);
$NSMF::Common::Logger::LOG_DIR = $NSMF::Server::BASE_PATH . '/logs';

my $logger = NSMF::Common::Logger->load($config->{config}{log});
my $reg    = NSMF::Common::Registry->new;

$reg->set( 'log'    => $logger );
$reg->set( 'config' => $config );

my $exit = AnyEvent->condvar();

my $echidna       = NSMF::Server->new();

my $proto_nodes   = $echidna->proto('node');
my $proto_clients = $echidna->proto('client');

# service node connections
my $node_listener = tcp_server(
    $config->node_host(), $config->node_port(),
    sub { node_accept(@_); },
    sub { node_prepare(@_); }
  );


# service client connections
my $client_listener = tcp_server(
    $config->client_host(), $config->client_port(),
    sub { client_accept(@_); },
    sub { client_prepare(@_); }
  );
#

$logger->info('Server Initialized ...');

$exit->recv();

exit(0);


#my $clients = POE::Component::Server::TCP->new(
#    ClientInput => sub {
#        my ($kernel, $heap, $input) = @_[KERNEL, HEAP, ARG0];
#
#        # 
#        $kernel->yield('handshake', $input);
#    },
#    ClientFilter => "POE::Filter::Line",
#    ObjectStates => [ $proto_clients => $proto_clients->states() ],
#    InlineStates => {
#        handshake => sub {
#            my ($kernel, $heap, $input) = @_[KERNEL, HEAP, ARG0];
#
#            # TODO: make this a tidier check for WebSocket handshake
#            if ( $input =~ /WebSocket-/ ) {
#                $logger->debug("HANDSHAKE");
#                websocket_handshake($heap->{client}, $input);
#            }
#            else {
#                # no special handshakes here, should've gone to the dispatcher
#                $kernel->yield('dispatcher', $input);
#            }
#
#            # from here on direct all input straight to the dispatcher
#            $kernel->state('tcp_server_got_input' => sub {
#                return if ( $_[HEAP]->{shutdown} );
#                $_[KERNEL]->yield('dispatcher', $_[ARG0]);
#            });
#        },
#    },
#    Started => sub {
#        $logger->info('Listening for clients on ' . $config->client_host() . ':' . $config->client_port());
#    },
#);
#
#my $transfer_queue = {};
#my $transfer_mngr = POE::Session->create(
#    inline_states => {
#        _start => sub {
#            $_[KERNEL]->alias_set('transfer_mngr');
#        },
#        catch => sub {
#            my ($json) = $_[ARG0];
#
#            $transfer_queue->{$json->{id}} =  NSMF::Server::Action->file_catcher({
#                transfer_id => $json->{id},
#                checksum    => $json->{result}{checksum},
#            });
#
#            if (defined $transfer_queue->{$json->{id}}) {
#                $logger->debug("Action file_catcher added to TransferQueue with job id " .$json->{id});
#            }
#        },
#        queue_remove => sub {
#            my ($job_id) = $_[ARG0];
#            $logger->debug("Removing job id $job_id from TransferQueue");
#            delete $transfer_queue->{$job_id};
#        },
#        queue_status => sub {
#            $logger->debug("The Transfer queue has " . scalar(keys %$transfer_queue). " jobs");
#            $logger->debug('Job Ids: ('. keys(%$transfer_queue).')');
#        }
#    },
#);


#
# NODE HANDLERS
#

sub node_prepare {
    my ($handle, $listen_host, $listen_port) = @_;

    $logger->info('Listening for client connections on ' . $listen_host . ':' . $listen_port);
}

sub node_accept {
    my ($handle, $remote_host, $remote_port) = @_;

    my $h = AnyEvent::Handle->new(
        fh => $handle,
        on_error => sub { node_error(@_); },
        on_read  => sub { $proto_nodes->read(@_); },
        on_eof   => sub { node_closed(@_); }
    );

    my @keyspace = ('a'..'z', 'A'..'Z', 0..9);

    my $node = {
        handle      => $h,
        remote      => [ $remote_host, $remote_port ],
        status      => 'REQ',
        name        => undef,
        group       => undef,
        session_id  => join('', map $keyspace[rand @keyspace], 0..32)
    };

    # store the node (and watcher) with reference to the file handle
    my $nodes = NSMF::Server->instance()->nodes();

    $nodes->{ fileno($handle) } = $node;

    $logger->debug('Node instance connection initiated from: ' . $remote_host . ':' . $remote_port);
}

sub node_error {
    my ($handle, $message) = @_;

    $logger->debug('Node terminated');

    node_unregister($handle);
}

sub node_closed {
    my ($handle) = @_;

    $logger->debug('Node disconnected');

    node_unregister($handle);
}

sub node_unregister {
    my ($handle) = @_;

    my $nodes = NSMF::Server->instance()->nodes();
    my $node = delete($nodes->{ fileno($handle->{fh}) });

    if ( defined($node) &&
         defined($node->{node_details}{id}) ) {
        my $db = NSMF::Server->database();
        $db->update({ node => { state => 0 } }, { id => $node->{node_details}{id} });
    }

    $logger->debug('Node ' . $node->{session_id} . ' disconnected');
}

#
#  CLIENT HANDLERS
#
#


sub client_prepare {
    my ($handle, $listen_host, $listen_port) = @_;

    $logger->info('Listening for client connections on ' . $listen_host . ':' . $listen_port);
}

sub client_accept {
    my ($handle, $remote_host, $remote_port) = @_;

    my $h = AnyEvent::Handle->new(
        fh => $handle,
        on_error => sub { client_error(@_); },
        on_read  => sub { $proto_clients->read(@_); },
        on_eof   => sub { client_closed(@_); }
    );

    my @keyspace = ('a'..'z', 'A'..'Z', 0..9);

    my $client = {
        handle      => $h,
        remote      => [ $remote_host, $remote_port ],
        status      => 'REQ',
        name        => undef,
        group       => undef,
        session_id  => join('', map $keyspace[rand @keyspace], 0..32)
    };

    # store the client (and watcher) with reference to the file handle
    my $clients = NSMF::Server->instance()->clients();

    $clients->{ fileno($handle) } = $client;

    $logger->debug('Client instance connection initiated from: ' . $remote_host . ':' . $remote_port);
}

sub client_error {
    my ($handle, $message) = @_;

    $logger->debug('Client terminated');

    client_unregister($handle);
}

sub client_closed {
    my ($handle) = @_;

    $logger->debug('Client disconnected');

    client_unregister($handle);
}

sub client_unregister {
    my ($handle) = @_;

    my $clients = NSMF::Server->instance()->clients();
    my $client = delete($clients->{ fileno($handle->{fh}) });

    if ( defined($client) &&
         defined($client->{client_details}{id}) ) {
#        my $db = NSMF::Server->database();
#        $db->update({ client => { state => 0 } }, { id => $client->{client_details}{id} });
    }

    $logger->debug('Client ' . $client->{session_id} . ' disconnected');
}
